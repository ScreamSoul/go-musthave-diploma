// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/screamsoul/go-musthave-diploma/internal/models"
)

// AccrualRepositoryMock implements repositories.AccrualRepository
type AccrualRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetAccural          func(ctx context.Context, orderNumber int) (ap1 *models.Accural, err error)
	inspectFuncGetAccural   func(ctx context.Context, orderNumber int)
	afterGetAccuralCounter  uint64
	beforeGetAccuralCounter uint64
	GetAccuralMock          mAccrualRepositoryMockGetAccural
}

// NewAccrualRepositoryMock returns a mock for repositories.AccrualRepository
func NewAccrualRepositoryMock(t minimock.Tester) *AccrualRepositoryMock {
	m := &AccrualRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAccuralMock = mAccrualRepositoryMockGetAccural{mock: m}
	m.GetAccuralMock.callArgs = []*AccrualRepositoryMockGetAccuralParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAccrualRepositoryMockGetAccural struct {
	mock               *AccrualRepositoryMock
	defaultExpectation *AccrualRepositoryMockGetAccuralExpectation
	expectations       []*AccrualRepositoryMockGetAccuralExpectation

	callArgs []*AccrualRepositoryMockGetAccuralParams
	mutex    sync.RWMutex
}

// AccrualRepositoryMockGetAccuralExpectation specifies expectation struct of the AccrualRepository.GetAccural
type AccrualRepositoryMockGetAccuralExpectation struct {
	mock    *AccrualRepositoryMock
	params  *AccrualRepositoryMockGetAccuralParams
	results *AccrualRepositoryMockGetAccuralResults
	Counter uint64
}

// AccrualRepositoryMockGetAccuralParams contains parameters of the AccrualRepository.GetAccural
type AccrualRepositoryMockGetAccuralParams struct {
	ctx         context.Context
	orderNumber int
}

// AccrualRepositoryMockGetAccuralResults contains results of the AccrualRepository.GetAccural
type AccrualRepositoryMockGetAccuralResults struct {
	ap1 *models.Accural
	err error
}

// Expect sets up expected params for AccrualRepository.GetAccural
func (mmGetAccural *mAccrualRepositoryMockGetAccural) Expect(ctx context.Context, orderNumber int) *mAccrualRepositoryMockGetAccural {
	if mmGetAccural.mock.funcGetAccural != nil {
		mmGetAccural.mock.t.Fatalf("AccrualRepositoryMock.GetAccural mock is already set by Set")
	}

	if mmGetAccural.defaultExpectation == nil {
		mmGetAccural.defaultExpectation = &AccrualRepositoryMockGetAccuralExpectation{}
	}

	mmGetAccural.defaultExpectation.params = &AccrualRepositoryMockGetAccuralParams{ctx, orderNumber}
	for _, e := range mmGetAccural.expectations {
		if minimock.Equal(e.params, mmGetAccural.defaultExpectation.params) {
			mmGetAccural.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccural.defaultExpectation.params)
		}
	}

	return mmGetAccural
}

// Inspect accepts an inspector function that has same arguments as the AccrualRepository.GetAccural
func (mmGetAccural *mAccrualRepositoryMockGetAccural) Inspect(f func(ctx context.Context, orderNumber int)) *mAccrualRepositoryMockGetAccural {
	if mmGetAccural.mock.inspectFuncGetAccural != nil {
		mmGetAccural.mock.t.Fatalf("Inspect function is already set for AccrualRepositoryMock.GetAccural")
	}

	mmGetAccural.mock.inspectFuncGetAccural = f

	return mmGetAccural
}

// Return sets up results that will be returned by AccrualRepository.GetAccural
func (mmGetAccural *mAccrualRepositoryMockGetAccural) Return(ap1 *models.Accural, err error) *AccrualRepositoryMock {
	if mmGetAccural.mock.funcGetAccural != nil {
		mmGetAccural.mock.t.Fatalf("AccrualRepositoryMock.GetAccural mock is already set by Set")
	}

	if mmGetAccural.defaultExpectation == nil {
		mmGetAccural.defaultExpectation = &AccrualRepositoryMockGetAccuralExpectation{mock: mmGetAccural.mock}
	}
	mmGetAccural.defaultExpectation.results = &AccrualRepositoryMockGetAccuralResults{ap1, err}
	return mmGetAccural.mock
}

// Set uses given function f to mock the AccrualRepository.GetAccural method
func (mmGetAccural *mAccrualRepositoryMockGetAccural) Set(f func(ctx context.Context, orderNumber int) (ap1 *models.Accural, err error)) *AccrualRepositoryMock {
	if mmGetAccural.defaultExpectation != nil {
		mmGetAccural.mock.t.Fatalf("Default expectation is already set for the AccrualRepository.GetAccural method")
	}

	if len(mmGetAccural.expectations) > 0 {
		mmGetAccural.mock.t.Fatalf("Some expectations are already set for the AccrualRepository.GetAccural method")
	}

	mmGetAccural.mock.funcGetAccural = f
	return mmGetAccural.mock
}

// When sets expectation for the AccrualRepository.GetAccural which will trigger the result defined by the following
// Then helper
func (mmGetAccural *mAccrualRepositoryMockGetAccural) When(ctx context.Context, orderNumber int) *AccrualRepositoryMockGetAccuralExpectation {
	if mmGetAccural.mock.funcGetAccural != nil {
		mmGetAccural.mock.t.Fatalf("AccrualRepositoryMock.GetAccural mock is already set by Set")
	}

	expectation := &AccrualRepositoryMockGetAccuralExpectation{
		mock:   mmGetAccural.mock,
		params: &AccrualRepositoryMockGetAccuralParams{ctx, orderNumber},
	}
	mmGetAccural.expectations = append(mmGetAccural.expectations, expectation)
	return expectation
}

// Then sets up AccrualRepository.GetAccural return parameters for the expectation previously defined by the When method
func (e *AccrualRepositoryMockGetAccuralExpectation) Then(ap1 *models.Accural, err error) *AccrualRepositoryMock {
	e.results = &AccrualRepositoryMockGetAccuralResults{ap1, err}
	return e.mock
}

// GetAccural implements repositories.AccrualRepository
func (mmGetAccural *AccrualRepositoryMock) GetAccural(ctx context.Context, orderNumber int) (ap1 *models.Accural, err error) {
	mm_atomic.AddUint64(&mmGetAccural.beforeGetAccuralCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccural.afterGetAccuralCounter, 1)

	if mmGetAccural.inspectFuncGetAccural != nil {
		mmGetAccural.inspectFuncGetAccural(ctx, orderNumber)
	}

	mm_params := AccrualRepositoryMockGetAccuralParams{ctx, orderNumber}

	// Record call args
	mmGetAccural.GetAccuralMock.mutex.Lock()
	mmGetAccural.GetAccuralMock.callArgs = append(mmGetAccural.GetAccuralMock.callArgs, &mm_params)
	mmGetAccural.GetAccuralMock.mutex.Unlock()

	for _, e := range mmGetAccural.GetAccuralMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmGetAccural.GetAccuralMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccural.GetAccuralMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccural.GetAccuralMock.defaultExpectation.params
		mm_got := AccrualRepositoryMockGetAccuralParams{ctx, orderNumber}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccural.t.Errorf("AccrualRepositoryMock.GetAccural got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccural.GetAccuralMock.defaultExpectation.results
		if mm_results != nil {
			return (*mm_results).ap1, (*mm_results).err
		}
		mmGetAccural.t.Fatal("No results are set for the AccrualRepositoryMock.GetAccural")
	}
	if mmGetAccural.funcGetAccural != nil {
		return mmGetAccural.funcGetAccural(ctx, orderNumber)
	}
	mmGetAccural.t.Fatalf("Unexpected call to AccrualRepositoryMock.GetAccural. %v %v", ctx, orderNumber)
	return
}

// GetAccuralAfterCounter returns a count of finished AccrualRepositoryMock.GetAccural invocations
func (mmGetAccural *AccrualRepositoryMock) GetAccuralAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccural.afterGetAccuralCounter)
}

// GetAccuralBeforeCounter returns a count of AccrualRepositoryMock.GetAccural invocations
func (mmGetAccural *AccrualRepositoryMock) GetAccuralBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccural.beforeGetAccuralCounter)
}

// Calls returns a list of arguments used in each call to AccrualRepositoryMock.GetAccural.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccural *mAccrualRepositoryMockGetAccural) Calls() []*AccrualRepositoryMockGetAccuralParams {
	mmGetAccural.mutex.RLock()

	argCopy := make([]*AccrualRepositoryMockGetAccuralParams, len(mmGetAccural.callArgs))
	copy(argCopy, mmGetAccural.callArgs)

	mmGetAccural.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccuralDone returns true if the count of the GetAccural invocations corresponds
// the number of defined expectations
func (m *AccrualRepositoryMock) MinimockGetAccuralDone() bool {
	for _, e := range m.GetAccuralMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccuralMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccuralCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccural != nil && mm_atomic.LoadUint64(&m.afterGetAccuralCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAccuralInspect logs each unmet expectation
func (m *AccrualRepositoryMock) MinimockGetAccuralInspect() {
	for _, e := range m.GetAccuralMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccrualRepositoryMock.GetAccural with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccuralMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccuralCounter) < 1 {
		if m.GetAccuralMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccrualRepositoryMock.GetAccural")
		} else {
			m.t.Errorf("Expected call to AccrualRepositoryMock.GetAccural with params: %#v", *m.GetAccuralMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccural != nil && mm_atomic.LoadUint64(&m.afterGetAccuralCounter) < 1 {
		m.t.Error("Expected call to AccrualRepositoryMock.GetAccural")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AccrualRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetAccuralInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AccrualRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AccrualRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAccuralDone()
}
